# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)

Language.create!([{ name: 'ActionScript', ace_syntax: 'none', pygments_syntax: 'actionscript'},
                  { name: 'Ada', ace_syntax: 'none', pygments_syntax: 'ada'},
                  { name: 'Apex', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'AppleScript', ace_syntax: 'none', pygments_syntax: 'applescript'},
                  { name: 'Arc', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Arduino', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'ASP', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Assembly', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Augeas', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'AutoHotKey', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Basic', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Boo', ace_syntax: 'none', pygments_syntax: 'boo'},
                  { name: 'Bro', ace_syntax: 'none', pygments_syntax: 'bro'},
                  { name: 'C', ace_syntax: 'c_cpp', pygments_syntax: 'c'},
                  { name: 'C#', ace_syntax: 'csharp', pygments_syntax: 'csharp'},
                  { name: 'C++', ace_syntax: 'c_cpp', pygments_syntax: 'cpp'},
                  { name: 'Ceylon', ace_syntax: 'none', pygments_syntax: 'ceylon'},
                  { name: 'Clojure', ace_syntax: 'clojure', pygments_syntax: 'clojure'},
                  { name: 'CoffeeScript', ace_syntax: 'coffee', pygments_syntax: 'coffeescript'},
                  { name: 'ColdFusion', ace_syntax: 'coldfusion', pygments_syntax: 'coldfusion'},
                  { name: 'Common Lisp', ace_syntax: 'lisp', pygments_syntax: 'cl'},
                  { name: 'Coq', ace_syntax: 'none', pygments_syntax: 'coq'},
                  { name: 'D', ace_syntax: 'none', pygments_syntax: 'd'},
                  { name: 'Dart', ace_syntax: 'dart', pygments_syntax: 'dart'},
                  { name: 'DCPU-16 ASM', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Delphi', ace_syntax: 'none', pygments_syntax: 'delphi'},
                  { name: 'Dylan', ace_syntax: 'none', pygments_syntax: 'dylan'},
                  { name: 'eC', ace_syntax: 'none', pygments_syntax: 'ec'},
                  { name: 'Ecl', ace_syntax: 'none', pygments_syntax: 'ecl'},
                  { name: 'Eiffel', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Elixir', ace_syntax: 'none', pygments_syntax: 'elixir'},
                  { name: 'Emacs Lisp', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Erlang', ace_syntax: 'none', pygments_syntax: 'erlang'},
                  { name: 'F#', ace_syntax: 'none', pygments_syntax: 'fsharp'},
                  { name: 'Factor', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Fancy', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Fantom', ace_syntax: 'none', pygments_syntax: 'fan'},
                  { name: 'Felix', ace_syntax: 'none', pygments_syntax: 'felix'},
                  { name: 'FORTRAN 90', ace_syntax: 'none', pygments_syntax: 'fortran'},
                  { name: 'Go', ace_syntax: 'golang', pygments_syntax: 'go'},
                  { name: 'Gosu', ace_syntax: 'none', pygments_syntax: 'gosu'},
                  { name: 'Groovy', ace_syntax: 'groovy', pygments_syntax: 'groovy'},
                  { name: 'Haskell', ace_syntax: 'none', pygments_syntax: 'haskell'},
                  { name: 'Io', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Ioke', ace_syntax: 'none', pygments_syntax: 'ioke'},
                  { name: 'J', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Java', ace_syntax: 'java', pygments_syntax: 'java'},
                  { name: 'JavaScript', ace_syntax: 'javascript', pygments_syntax: 'javascript'},
                  { name: 'Julia', ace_syntax: 'none', pygments_syntax: 'julia'},
                  { name: 'Koka', ace_syntax: 'none', pygments_syntax: 'koka'},
                  { name: 'Kotlin', ace_syntax: 'none', pygments_syntax: 'kotlin'},
                  { name: 'Logtalk', ace_syntax: 'none', pygments_syntax: 'logtalk'},
                  { name: 'Lua', ace_syntax: 'lua', pygments_syntax: 'lua'},
                  { name: 'Matlab', ace_syntax: 'none', pygments_syntax: 'matlab'},
                  { name: 'Max', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Mirah', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Monkey', ace_syntax: 'none', pygments_syntax: 'monkey'},
                  { name: 'Nemerle', ace_syntax: 'none', pygments_syntax: 'nemerle'},
                  { name: 'Nimrod', ace_syntax: 'none', pygments_syntax: 'nimrod'},
                  { name: 'Nu', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Objective-C', ace_syntax: 'objectivec', pygments_syntax: 'objectivec'},
                  { name: 'Objective-C++', ace_syntax: 'none', pygments_syntax: 'objectivec++'},
                  { name: 'Objective-J', ace_syntax: 'none', pygments_syntax: 'objectivej'},
                  { name: 'OCaml', ace_syntax: 'ocaml', pygments_syntax: 'ocaml'},
                  { name: 'Ooc', ace_syntax: 'none', pygments_syntax: 'ooc'},
                  { name: 'Opa', ace_syntax: 'none', pygments_syntax: 'opa'},
                  { name: 'OpenEdge ABL', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Parrot', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Perl', ace_syntax: 'perl', pygments_syntax: 'perl'},
                  { name: 'PHP', ace_syntax: 'php', pygments_syntax: 'php'},
                  { name: 'Prolog', ace_syntax: 'none', pygments_syntax: 'prolog'},
                  { name: 'Puppet', ace_syntax: 'none', pygments_syntax: 'puppet'},
                  { name: 'Pure Data', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Python', ace_syntax: 'python', pygments_syntax: 'python'},
                  { name: 'Python 3', ace_syntax: 'python', pygments_syntax: 'python3'},
                  { name: 'R', ace_syntax: 'r', pygments_syntax: 'r'},
                  { name: 'Racket', ace_syntax: 'none', pygments_syntax: 'racket'},
                  { name: 'Rebol', ace_syntax: 'none', pygments_syntax: 'rebol'},
                  { name: 'Ruby', ace_syntax: 'ruby', pygments_syntax: 'ruby'},
                  { name: 'Rust', ace_syntax: 'none', pygments_syntax: 'rust'},
                  { name: 'Scala', ace_syntax: 'scala', pygments_syntax: 'scala'},
                  { name: 'Scheme', ace_syntax: 'scheme', pygments_syntax: 'scheme'},
                  { name: 'SciLab', ace_syntax: 'none', pygments_syntax: 'scilab'},
                  { name: 'Self', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Shell', ace_syntax: 'sh', pygments_syntax: 'sh'},
                  { name: 'Smalltalk', ace_syntax: 'none', pygments_syntax: 'smalltalk'},
                  { name: 'Standard ML', ace_syntax: 'none', pygments_syntax: 'sml'},
                  { name: 'SuperCollider', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Text', ace_syntax: 'text', pygments_syntax: 'none'},
                  { name: 'Tcl', ace_syntax: 'tcl', pygments_syntax: 'tcl'},
                  { name: 'Turing', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'Vala', ace_syntax: 'none', pygments_syntax: 'vala'},
                  { name: 'Verilog', ace_syntax: 'none', pygments_syntax: 'v'},
                  { name: 'VHDL', ace_syntax: 'none', pygments_syntax: 'vhdl'},
                  { name: 'VimL', ace_syntax: 'none', pygments_syntax: 'vim'},
                  { name: 'Visual Basic', ace_syntax: 'none', pygments_syntax: 'none'},
                  { name: 'XQuery', ace_syntax: 'xquery', pygments_syntax: 'xquery'}])

User.create!([{email: 'code@flash.io',
               username: 'codeflash',
               password: 'Something123',
               admin: true}])

Problem.create!([{name: 'Swag',
                  shortname: 'swag',
                  points: 1,
                  description: 'Wait 15s, print "Swag", repeat.',
                  profile_id: User.find_by_username('codeflash').profile.id}])

Solution.create!([{language: Language.find_by_name('Basic'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "10 PRINT \"SWAG\"\n20 PAUSE 15000\n30 GOTO 10\n"},

                  {language: Language.find_by_name('Boo'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "while true:\n\tprint 'Swag'\n\tSystem.Threading.Thread.Sleep(15s)\n"},

                  {language: Language.find_by_name('C'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "\n#include <stdio.h>\n#include <unistd.h>\n\nint main(int argc, const char** arg) {\n\twhile (1) {\n\t\tprintf(\"Swag\\n\");\n\t\tsleep(15);\n\t}\n\treturn 0;\n}\n"},

                  {language: Language.find_by_name('Common Lisp'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "(loop\n\t(write-line \"Swag\")\n\t(sleep 15))"},

                  {language: Language.find_by_name('Clojure'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "(while true \n  (do (println \"Swag\")\n      (Thread/sleep 15000)))\n\n"},

                  {language: Language.find_by_name('CoffeeScript'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "setInterval ->\n\talert(\"Swag\")\n, 15000\n"},

                  {language: Language.find_by_name('C++'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "#include <stdio.h>\n#include <unistd.h>\n\nint main(){\n    while (true) {\n\t    std::cout << \"Swag\" << std::endl;\n\t    sleep(15);\n    }\n    return 0;\n}\n"},

                  {language: Language.find_by_name('C#'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "using Console;\n\npublic class Swag {\n\tpublic static void main() {\n\t\twhile(true) {\n\t\t\tConsole.writeLine(\"Swag\");\n\t\t\tSystem.Threading.Thread.Sleep(15000);\n\t\t}\n\t}\n}"},

                  {language: Language.find_by_name('Dart'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "import 'dart:async';\n\nvoid main() {\n  new Timer.repeating(15 * 1000,\n    (Timer t) =>\n      print(\"Swag\"));\n}\n"},

                  {language: Language.find_by_name('Emacs Lisp'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: ";; Run with emacs --script swag.el\n\n(while t\n  (message \"Swag\")\n  (sleep-for 15))\n"},

                  {language: Language.find_by_name('Erlang'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "#!/usr/bin/escript\n\n\n% Author: Lee Avital\n% Description: Swag\n\n\n-module(swag).\n\nthe_timer() ->\n   io:format(\"hello world\\n\"),\n   timer:sleep(15000),\n   the_timer().\n    \n\nmain( _ ) ->\n   the_timer().\n\n\n\n\n\n\n\n"},

                  {language: Language.find_by_name('F#'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "open System.Threading\n\n[<EntryPoint>]\nlet main argv = \n    while true do \n        printfn \"Swag\"\n        Thread.Sleep 15000\n    0"},

                  {language: Language.find_by_name('Go'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n   for ;; {\n\tfmt.Println(\"Swag\")\n\ttime.Sleep(15 * time.Second)\n    }\n}\n"},

                  {language: Language.find_by_name('Groovy'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "while(true){\n\tprintln \"Swag\"\n\tThread.sleep(15000)\n}"},

                  {language: Language.find_by_name('J'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "f =: 3 : 0\n  while. 1 do.\n    'Swag' (1!:2) 2 \n    usleep 15000000\n  end.\n)\nf ''\nexit 0\n"},

                  {language: Language.find_by_name('Arduino'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "void setup() {\n  Serial.begin(9600); \n}\n\nvoid loop() {\n  Serial.println(\"swag\");\n  delay(15000); \n}\n"},

                  {language: Language.find_by_name('Java'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "public class Swag {\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\twhile(true) {\n\t\t\tSystem.out.println(\"Swag\");\n\t\t\tThread.sleep(15000);\n\t\t}\n\t}\n}\n"},

                  {language: Language.find_by_name('Julia'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "while true\n  println(\"Swag\")\n  sleep(15)\nend\n"},

                  {language: Language.find_by_name('JavaScript'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "setInterval(function() {\n\talert(\"Swag\");\n}, 15000);\n"},

                  {language: Language.find_by_name('Lua'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "local clock = os.clock\n\nfunction sleep(n)\n\tlocal time = clock()\n\twhile clock() - time <= n do end\nend\n\nwhile true do\n\tprint('Swag')\n\tsleep(15)\nend\n"},

                  {language: Language.find_by_name('Objective-C'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "//\n//  swag.m\n//  swag\n//\n//  Created by Kristen Mills on 1/22/13.\n//  Copyright (c) 2013 Kristen Mills. All rights reserved.\n//\n\n#import <Cocoa/Cocoa.h>\n\nint main(int argc, char *argv[])\n{\n    while (true) {\n        NSAlert *alert = [NSAlert alertWithMessageText: @\"Swag!\"\n                                         defaultButton: @\"Swag\"\n                                       alternateButton: nil\n                                           otherButton: nil\n                             informativeTextWithFormat: @\"\"];\n        [[NSRunningApplication currentApplication] activateWithOptions:NSApplicationActivateIgnoringOtherApps];\n        [alert runModal];\n        [NSThread sleepForTimeInterval:15];\n    }\n    return 0;\n}\n"},

                  {language: Language.find_by_name('Text'),  # moonscript
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "clock = os.clock\n\nsleep = (n) ->\n\ttime = clock()\n\twhile clock() - time <= n do nil\n\nwhile true\n\tprint 'Swag'\n\tsleep 15\n"},

                  {language: Language.find_by_name('Pure Data'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "#N canvas 1602 50 956 1028 10;\n#X obj 68 149 print;\n#X msg 96 114 Swag;\n#X obj 149 42 loadbang;\n#X obj 120 78 metro 15000;\n#X connect 1 0 0 0;\n#X connect 2 0 3 0;\n#X connect 3 0 1 0;\n"},

                  {language: Language.find_by_name('PHP'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "<?php\nwhile(true) {\n\tprint(\"Swag\\n\");\n\tsleep(15);\n}\n?>\n"},

                  {language: Language.find_by_name('Perl'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "while() {\n\tprint \"Swag\\n\";\n\tsleep 15;\n}\n"},

                  {language: Language.find_by_name('Python'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "import time\n\nwhile True:\n\tprint('Swag')\n\ttime.sleep(15)\n"},

                  {language: Language.find_by_name('R'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "repeat {\n  print(\"Swag\")\n  Sys.sleep(15)\n}\n"},

                  {language: Language.find_by_name('Ruby'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "loop do\n\tputs 'Swag'\n\tsleep 15\nend\n"},

                  {language: Language.find_by_name('Scala'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "object swag{\n  def main(args: Array[String]){\n    while (true) { println(\"Swag\"); Thread sleep 15000 }\n  }\n}"},

                  {language: Language.find_by_name('Scheme'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "(let ((wait (make-time 'time-duration 0 15)))\n  (let recur ()\n    (printf \"Swag\\n\") (sleep wait) (recur)))\n"},

                  {language: Language.find_by_name('Shell'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "#!/bin/bash\nwhile true\ndo\n\techo Swag;\n\tsleep 15;\ndone\n"},

                  {language: Language.find_by_name('Standard ML'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "\n(* Man I don't miss this language *)\n\nval pause_length = Time.fromReal(15.0);\nwhile true do\n  (fn _ => (\n    print \"Swag\\n\";\n    OS.Process.sleep(pause_length)))();"},

                  {language: Language.find_by_name('Visual Basic'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "\xEF\xBB\xBFModule Swag\n    Sub Main()\n        Do\n            Console.WriteLine(\"Swag\")\n\n            System.Threading.Thread.Sleep(15 * 1000)\n        Loop\n    End Sub\nEnd Module\n"},

                  {language: Language.find_by_name('VimL'),
                   problem: Problem.find_by_shortname('swag'),
                   profile: User.find_by_username('codeflash').profile,
                   code: "while 1\n\techom \"Swag\"\n\tsleep 15\nendwhile\n"}])

Language.all.each do |language|
  achievement = Achievement.create!({ name: "Best Solution - #{language.name}",
                        points: 15,
                        description: "Awarded for having the best #{language.name} solution for a given problem 30 days after problem creation"})
  solution = Solution.where(problem_id: Problem.find_by_shortname('swag'), language_id: language).first
  if !solution.blank?
    solution.achievements << achievement
    solution.save!
  end
end
